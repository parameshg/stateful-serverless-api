name: publish
on:
  push:
    branches: [ "ci" ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Codebase
      uses: actions/checkout@v3

    - name: Setup Dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Restore Dependencies
      run: dotnet restore source/Api.csproj

    - name: Build Codebase
      run: dotnet build  source/Api.csproj --no-restore

    #- name: Login Image Repository (Docker Hub)
    #  uses: docker/login-action@v2
    #  with:
    #    username: ${{ secrets.DOCKER_USERNAME }}
    #    password: ${{ secrets.DOCKER_PASSWORD }}

    #- name: Build & Push Image (Docker Hub)
    #  uses: docker/build-push-action@v4
    #  with:
    #    context: .
    #    push: true
    #    tags: parameshg/statefull-serverless-api:latest

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        mask-aws-account-id: true

    - name: Login AWS ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & Push Image (AWS ECR)
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/statefull-serverless-api:latest .
        docker push ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/statefull-serverless-api:latest
 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Initialize Terraform
      run: terraform init -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

    - name: Validate Terraform
      run: terraform validate

    - name: Plan Terraform
      run: terraform plan -var "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT }}" -var "AWS_REGION=${{ secrets.AWS_REGION }}" -var "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      continue-on-error: false

    - name: Apply Terraform
      run: terraform apply -auto-approve -var "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT }}" -var "AWS_REGION=${{ secrets.AWS_REGION }}" -var "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      continue-on-error: false